<h1>1068 트리</h1>
<h2>문제</h2>

트리에서 리프 노드란, 자식의 개수가 0인 노드를 말한다.
트리가 주어졌을 때, 노드 하나를 지울 것이다. 그 때, 남은 트리에서 리프 노드의 개수를 구하는 프로그램을 작성하시오. 노드를 지우면 그 노드와 노드의 모든 자손이 트리에서 제거된다.

<h2>입력</h2>
첫째 줄에 트리의 노드의 개수 N이 주어진다. N은 50보다 작거나 같은 자연수이다. 둘째 줄에는 0번 노드부터 N-1번 노드까지, 각 노드의 부모가 주어진다. 만약 부모가 없다면 (루트) -1이 주어진다. 셋째
줄에는 지울 노드의 번호가 주어진다.

<h2>풀이 방법</h2>
입력 받은 값으로 트리를 만든 후 지운 노드를 제외하고 루트 노드 부터 DPS탐색을 이용해서 리프 노드에 도달하면 카운트를 증가 시킨다.
모든 노드를 방문하면 카운트를 출력한다

<h2> 코드 </h2>

```cpp
#include <iostream>
using namespace std;

int n, a;
int nd[51]; //노드
int visit[51]; //들른 노드
int cnt = 0; //리프 노드 수

void dps(int p)
{
    int c = 0; //리프 노드 여부 체크용
    for (int i = 0; i < n; i++)
    {
        if (nd[i] == p && visit[i] != 1) //들리지 않았고, 자식 노드인 경우
        {
            visit[i] = 1; //방문 표시
            c++; //리프 노드 아닌 것 체크
            dps(i); //dps 반복
        }
    }
    if (c == 0) //리프노드인 경우
    {
        cnt++; //개수 추가 후 리턴
        return;
    }
}


int main()
{
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    cin >> n;

    for (int i = 0; i < n; i++)
    {
        cin >> a;
        nd[i] = a;
    }
    cin >> a;
    nd[a] = -2; //제거할 노드
    for (int i = 0; i < n; i++)
    {
        if (nd[i] == -1) //부모 노드 부터 dps
        {
            dps(i);
            break;
        }
    }
    cout << cnt << endl;
    return 0;
}
```
