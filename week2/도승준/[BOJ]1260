# [[BOJ]1260](https://www.acmicpc.net/problem/1260)

## 풀이
인접리스트로 엣지 정보를 저장한다. 양방향 엣지이므로, 각 엣지가 두 정점에 대해 모두 저장된다.
DFS -재귀적으로 구현,
BFS - 큐를 이용하여 구현

## 전체 코드
```C++
#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>

using namespace std;

vector<int> graph[1001];  // 인접 리스트로 그래프 저장
bool visited[1001];       // 방문 여부 확인 배열

// DFS 함수 (재귀적으로 구현)
void dfs(int v) {
    visited[v] = true;  // 현재 정점을 방문 표시
    cout << v << " ";   // 방문한 정점 출력
    
    // 현재 정점에서 연결된 다른 정점들을 방문
    for (int i : graph[v]) {
        if (!visited[i]) {
            dfs(i);
        }
    }
}

// BFS 함수 (큐를 이용해 구현)
void bfs(int start) {
    queue<int> q;
    q.push(start);
    visited[start] = true;
    
    while (!q.empty()) {
        int v = q.front();
        q.pop();
        cout << v << " ";  // 방문한 정점 출력
        
        // 현재 정점에서 연결된 다른 정점들을 큐에 추가
        for (int i : graph[v]) {
            if (!visited[i]) {
                visited[i] = true;
                q.push(i);
            }
        }
    }
}

int main() {
    int N, M, V;  // N: 정점 개수, M: 간선 개수, V: 시작 정점
    cin >> N >> M >> V;

    // 간선 정보 입력
    for (int i = 0; i < M; i++) {
        int u, v;
        cin >> u >> v;
        graph[u].push_back(v);
        graph[v].push_back(u);  // 양방향 간선이므로 양쪽에 간선 추가
    }
    
    // 각 정점에 연결된 간선을 번호 순으로 정렬
    for (int i = 1; i <= N; i++) {
        sort(graph[i].begin(), graph[i].end());
    }
    
    // DFS 탐색
    fill(visited, visited + N + 1, false);  // 방문 배열 초기화
    dfs(V);
    cout << endl;
    
    // BFS 탐색
    fill(visited, visited + N + 1, false);  // 방문 배열 초기화
    bfs(V);
    cout << endl;
    
    return 0;
}
```
