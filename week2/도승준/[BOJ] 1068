# [[BOJ]1068](https://www.acmicpc.net/source/83720971)

## 풀이
벡터를 활용해 인접리스트를 만들고, DFS를 사용해서 리프노드를 찾는다, 자식이 없거나, 모든 자식이 삭제된 경우 리프 노드로 지정한다.
자식노드들이 있을때, 재귀적으로 DFS를 실행한다.

## 전체 코드
```C++
#include <iostream>
#include <vector>
using namespace std;

vector<int> tree[50];  // 트리를 저장하는 인접 리스트
int N, root, deleteNode, leafCount = 0;

// DFS를 사용해 리프 노드를 찾는 함수
void dfs(int node) {
    if (node == deleteNode) return;  // 삭제할 노드는 처리하지 않는다.
    
    // 자식이 없거나, 모든 자식이 삭제된 경우 리프 노드로 지정, 카운트 개수를 늘린다.
    if (tree[node].empty() || (tree[node].size() == 1 && tree[node][0] == deleteNode)) {
        leafCount++;
        return;
    }
    
    // 자식 노드들에 대해 DFS 실행
    for (int child : tree[node]) {
        dfs(child);
    }
}

int main() {
    cin >> N;
    vector<int> parent(N);
    
    // 부모 노드 입력 받기
    for (int i = 0; i < N; i++) {
        cin >> parent[i];
        if (parent[i] == -1) {
            root = i;  // 부모가 -1이면 루트 노드
        } else {
            tree[parent[i]].push_back(i);  // 부모-자식 관계 설정
        }
    }
    
    // 지울 노드 번호 입력 받기
    cin >> deleteNode;
    
    // 루트 노드를 삭제하는 경우, 리프 노드는 0
    if (root == deleteNode) {
        cout << 0 << endl;
    } else {
        dfs(root);  // 루트 노드부터 DFS 시작
        cout << leafCount << endl;
    }
    
    return 0;
}
```
